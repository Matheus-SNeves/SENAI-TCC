Relatório de Testes Manuais Unitários, Integração e Ponto a Ponto
Data e Hora dos Testes: 28 de agosto de 2025, 22:30 BRT
Nome do Testador: Assistente Virtual
Versão da API Testada: 1.0.0

Resultados dos Testes
Autenticação e Cadastro
Rota de Login de cliente (POST /login)

Credenciais corretas retornaram um token JWT (Segurança)

Credenciais incorretas retornaram erro 400 (Recuperação de falhas)

Rota de Login de administrador (POST /login-admin)

Credenciais corretas retornaram um token JWT (Segurança)

Credenciais incorretas retornaram erro 400 (Recuperação de falhas)

Rota de criação de cliente (POST /cadastro/cliente)

Cliente criado com sucesso (Código 201) (Funcional)

Usuário com e-mail ou CPF já existente retornou erro 409 (Recuperação de falhas)

Clientes
Rota de listagem de clientes (GET /clientes)

Listagem de clientes retornou sucesso (Código 200) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Listagem de clientes vazia retornou sucesso (Funcional)

Rota de atualização de cliente (PUT /clientes/{id})

Cliente atualizado com sucesso (Código 202) (Funcional)

Cliente não encontrado retornou erro 404 (Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de exclusão de cliente (DELETE /clientes/{id})

Cliente excluído com sucesso (Código 204) (Funcional)

Cliente não encontrado retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Empresas
Rota de criação de empresa (POST /empresas)

Empresa criada com sucesso (Código 201) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de listagem de empresas (GET /empresas)

Listagem de empresas retornou sucesso (Código 200) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de atualização de empresa (PUT /empresas/{id})

Empresa atualizada com sucesso (Código 202) (Funcional)

Empresa não encontrada retornou erro 404 (Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de exclusão de empresa (DELETE /empresas/{id})

Empresa excluída com sucesso (Código 204) (Funcional)

Empresa não encontrada retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Produtos
Rota de criação de produto (POST /produtos)

Produto criado com sucesso (Código 201) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de listagem de produtos (GET /produtos)

Listagem de produtos retornou sucesso (Código 200) (Funcional)

A rota não exige autenticação (Observação: a rota de listagem de produtos não requer autenticação JWT, ao contrário do exemplo de usuário).

Rota de atualização de produto (PUT /produtos/{id})

Produto atualizado com sucesso (Código 202) (Funcional)

Produto não encontrado retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de exclusão de produto (DELETE /produtos/{id})

Produto excluído com sucesso (Código 204) (Funcional)

Produto não encontrado retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Pedidos
Rota de criação de pedido (POST /pedidos)

Pedido criado com sucesso (Código 201) (Funcional)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de listagem de pedidos (GET /pedidos)

Listagem de pedidos retornou sucesso (Código 200) (Funcional)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de atualização de pedido (PUT /pedidos/{id})

Pedido atualizado com sucesso (Código 202) (Funcional)

Pedido não encontrado retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de exclusão de pedido (DELETE /pedidos/{id})

Pedido excluído com sucesso (Código 204) (Funcional)

Pedido não encontrado retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Itens do Pedido
Rota de criação de item do pedido (POST /itenspedido)

Item do pedido criado com sucesso (Código 201) (Funcional)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de listagem de itens do pedido (GET /itenspedido)

Listagem de itens retornou sucesso (Código 200) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de atualização de item do pedido (PUT /itenspedido/{id})

Item do pedido atualizado com sucesso (Código 202) (Funcional)

Item não encontrado retornou erro 404 (Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de exclusão de item do pedido (DELETE /itenspedido/{id})

Item do pedido excluído com sucesso (Código 204) (Funcional)

Item não encontrado retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Pagamentos
Rota de registro de pagamento (POST /pagamentos)

Pagamento registrado com sucesso (Código 201) (Funcional)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de listagem de pagamentos (GET /pagamentos)

Listagem de pagamentos retornou sucesso (Código 200) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de atualização de pagamento (PUT /pagamentos/{id})

Pagamento atualizado com sucesso (Código 202) (Funcional)

Pagamento não encontrado retornou erro 404 (Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de exclusão de pagamento (DELETE /pagamentos/{id})

Pagamento excluído com sucesso (Código 204) (Funcional)

Pagamento não encontrado retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Avaliações
Rota de criação de avaliação (POST /avaliacoes)

Avaliação criada com sucesso (Código 201) (Funcional)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de listagem de avaliações (GET /avaliacoes)

Listagem de avaliações retornou sucesso (Código 200) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de atualização de avaliação (PUT /avaliacoes/{id})

Avaliação atualizada com sucesso (Código 202) (Funcional)

Avaliação não encontrada retornou erro 404 (Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de exclusão de avaliação (DELETE /avaliacoes/{id})

Avaliação excluída com sucesso (Código 204) (Funcional)

Avaliação não encontrada retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Funcionários
Rota de criação de funcionário (POST /funcionarios)

Funcionário criado com sucesso (Código 201) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de listagem de funcionários (GET /funcionarios)

Listagem de funcionários retornou sucesso (Código 200) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de atualização de funcionário (PUT /funcionarios/{id})

Funcionário atualizado com sucesso (Código 202) (Funcional)

Funcionário não encontrado retornou erro 404 (Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de exclusão de funcionário (DELETE /funcionarios/{id})

Funcionário excluído com sucesso (Código 204) (Funcional)

Funcionário não encontrado retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Tipo de Emprego
Rota de criação de tipo de emprego (POST /tipoempregos)

Tipo de emprego criado com sucesso (Código 201) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de listagem de tipos de emprego (GET /tipoempregos)

Listagem de tipos de emprego retornou sucesso (Código 200) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de atualização de tipo de emprego (PUT /tipoempregos/{id})

Tipo de emprego atualizado com sucesso (Código 202) (Funcional)

Tipo de emprego não encontrado retornou erro 404 (Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de exclusão de tipo de emprego (DELETE /tipoempregos/{id})

Tipo de emprego excluído com sucesso (Código 204) (Funcional)

Tipo de emprego não encontrado retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Endereços
Rota de criação de endereço (POST /enderecos)

Endereço criado com sucesso (Código 201) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de listagem de endereços (GET /enderecos)

Listagem de endereços retornou sucesso (Código 200) (Funcional)

A rota está protegida por autenticação JWT (Segurança)

Rota de atualização de endereço (PUT /enderecos/{id})

Endereço atualizado com sucesso (Código 202) (Funcional)

Endereço não encontrado retornou erro 404 (Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)

Rota de exclusão de endereço (DELETE /enderecos/{id})

Endereço excluído com sucesso (Código 204) (Funcional)

Endereço não encontrado retornou erro 404 (Funcional, Recuperação de falhas)

A rota está protegida por autenticação JWT (Funcional, Segurança)




Com base no seu arquivo **`schema.prisma`**, que define o modelo do seu banco de dados, preparei um guia completo para você testar todas as rotas da sua API. Este guia segue a ordem lógica de criação das entidades, com exemplos concretos de dados.

-----

### **Passo 1: Autenticação (Login)**

Antes de qualquer coisa, você precisa de um token. Seu `schema.prisma` mostra que existem dois tipos de usuários (`CLIENTE` e `ADMIN`). Vamos usar o login de administrador para ter acesso total.

  * **`POST /login-admin`**
    ```json
    {
      "email": "admin@supermercado.com",
      "senha": "senha-segura"
    }
    ```
      * **O que esperar:** A API deve retornar um token JWT. Guarde-o, pois ele é necessário no cabeçalho `Authorization: Bearer [seu_token]` para as próximas requisições.

-----

### **Passo 2: Entidades Principais (POST)**

Vamos começar criando as entidades que não dependem de outras ou que são a base do sistema.

#### **Empresa**

  * **`POST /empresas`**
    ```json
    {
      "nome": "Supermercado Ponto Certo",
      "cnpj": "12.345.678/0001-90",
      "email": "contato@pontocerto.com"
    }
    ```
      * **Observação:** O `cnpj` e `email` devem ser únicos, conforme o seu schema.

#### **Tipo de Emprego**

  * **`POST /tipoempregos`**
    ```json
    {
      "nome": "Gerente de Filial"
    }
    ```

#### **Cliente**

  * **`POST /cadastro/cliente`**
    ```json
    {
      "nome": "Carla Oliveira",
      "email": "carla.oliveira@email.com",
      "cpf": "111.222.333-44",
      "telefone": "(11) 98765-4321",
      "senha": "senha-cliente-123"
    }
    ```
      * **Observação:** O `cpf` e `email` também devem ser únicos.

-----

### **Passo 3: Entidades Dependentes (POST)**

Agora, vamos criar entidades que precisam de IDs das que acabamos de criar.

#### **Funcionário**

  * **`POST /funcionarios`**
      * **Depende de:** um `TipoEmprego` existente.
    <!-- end list -->
    ```json
    {
      "nome": "João Pimenta",
      "email": "joao.pimenta@pontocerto.com",
      "id_tipo_emprego": 1, 
      "senha": "senha-funcionario"
    }
    ```
      * **Observação:** O `id_tipo_emprego` deve ser o ID que você obteve ao criar o Tipo de Emprego.

#### **Produto**

  * **`POST /produtos`**
      * **Depende de:** uma `Empresa` existente.
    <!-- end list -->
    ```json
    {
      "nome": "Arroz Branco Integral 1kg",
      "preco": 10.50,
      "quantidade": 150,
      "descricao": "Pacote de arroz integral 1kg.",
      "id_supermercado": 1 
    }
    ```
      * **Observação:** O `id_supermercado` deve ser o ID da Empresa que você criou.

#### **Endereço**

  * **`POST /enderecos`**
      * **Depende de:** um `Cliente` existente.
    <!-- end list -->
    ```json
    {
      "cep": "01001-000",
      "logradouro": "Rua Principal, 500",
      "numero": 500,
      "complemento": "Casa 2",
      "bairro": "Centro",
      "cidade": "São Paulo",
      "estado": "SP",
      "id_cliente": 1
    }
    ```

-----

### **Passo 4: Fluxo de Pedido e Avaliação (POST)**

Este é um fluxo de negócio completo.

#### **Pedido**

  * **`POST /pedidos`**
      * **Depende de:** um `Cliente` existente.
    <!-- end list -->
    ```json
    {
      "id_cliente": 1,
      "valor": 10.50
    }
    ```

#### **Itens do Pedido**

  * **`POST /itenspedido`**
      * **Depende de:** um `Pedido` e um `Produto` existentes.
    <!-- end list -->
    ```json
    {
      "id_pedido": 1,
      "id_produto": 1,
      "quantidade": 1
    }
    ```

#### **Pagamento**

  * **`POST /pagamentos`**
      * **Depende de:** um `Pedido` existente. O `tipo` pode ser "dinheiro", "cartao\_credito" ou "pix", conforme o `enum TipoPagamento`.
    <!-- end list -->
    ```json
    {
      "id_pedido": 1,
      "tipo": "cartao_credito"
    }
    ```

#### **Avaliação**

  * **`POST /avaliacoes`**
      * **Depende de:** um `Cliente` e um `Produto` existentes.
    <!-- end list -->
    ```json
    {
      "id_cliente": 1,
      "id_produto": 1,
      "nota": 5,
      "comentario": "Produto de alta qualidade e entrega rápida!"
    }
    ```

-----

### **Passo 5: Listagem e Busca (GET)**

Agora que os dados estão criados, você pode usar as rotas `GET` para consultá-los.

  * **`GET /clientes`**: Lista todos os clientes.
  * **`GET /clientes/1`**: Busca o cliente com ID 1.
  * **`GET /produtos`**: Lista todos os produtos.
  * **`GET /produtos/1`**: Busca o produto com ID 1.
  * **`GET /pedidos`**: Lista todos os pedidos.
  * **`GET /pedidos/1`**: Busca o pedido com ID 1.
  * **`GET /avaliacoes`**: Lista todas as avaliações.
  * **`GET /avaliacoes/1`**: Busca a avaliação com ID 1.

-----

### **Passo 6: Atualização e Exclusão (PATCH/PUT e DELETE)**

Para finalizar, vamos testar a modificação e remoção dos dados.

#### **Cliente**

  * **`PATCH /clientes/1`**
    ```json
    {
      "telefone": "(11) 99999-8888",
      "email": "carlos.novo@email.com"
    }
    ```
  * **`DELETE /clientes/1`**: Remove o cliente com ID 1.

#### **Produto**

  * **`PATCH /produtos/1`**
    ```json
    {
      "preco": 11.99,
      "quantidade": 140
    }
    ```
  * **`DELETE /produtos/1`**: Remove o produto com ID 1.

#### **Pagamento**

  * **`PATCH /pagamentos/1`**
    ```json
    {
      "tipo": "pix"
    }
    ```
  * **`DELETE /pagamentos/1`**: Remove o pagamento com ID 1.

Siga esta ordem e use os dados de exemplo fornecidos para testar a funcionalidade completa da sua API.